"""
" Vim configuration.
" Updated 2021-04-20.
"
" Refer to my cheat sheet for usage details:
" https://steinbaugh.com/posts/vim.html
"""



" Notes {{{1
" ==============================================================================
"
" Consider moving useful notes documented here to the main Vim cheatsheet.
"
" Vim package manager {{{2
" ------------------------------------------------------------------------------
"
" Create a folder named 'pack' inside your '.vim' configuration folder. Direct
" subfolders of 'pack' can be used to organize packages/plugins into
" collections.
"
" Put plugins that should be loaded at startup into:
"   .vim/pack/<collection>/start/<plugin>
"
" Put plugins that should be added on demand with ':packadd' into:
"   .vim/pack/<collection>/opt/<plugin>
"
" See also:
" - https://shapeshed.com/vim-packages/
" - https://hackingcpp.com/dev/vim_plugins.html
"
" Runtimepath {{{2
" ------------------------------------------------------------------------------
"
" Check runtimepath (rtp) configuration with ':set runtimepath?' or
" ':echo $VIMRUNTIME'.
"
" Neovim-specific commands {{{2
" ------------------------------------------------------------------------------
" - ':vs|:te': Vertically split a terminal (like ':vert term' in Vim).
"   https://github.com/neovim/neovim/issues/3192



" Pre-flight checks {{{1
" ==============================================================================

let g:is_nvim=has("nvim")
let g:is_vim8=v:version >= 800 ? 1 : 0

" Check that Vim version matches minimum requirement.
" Note that MacVim is currently stuck on Vim 8.1, so keep relaxed here.
if g:is_vim8 && !g:is_nvim && v:version < 801
    :echom "ERROR: Vim 8.1+ is required for '~/.vimrc' config."
    exit
endif

" Check that Neovim version matches minimum requirement.
if g:is_nvim && !has("nvim-0.4")
    :echom "ERROR: nvim 0.4+ is required for '~/.vimrc' config."
    " nvim will exit without showing message.
    " > exit
endif

" Disable vi compatibility mode.
set nocompatible



" Global variables {{{1
" ==============================================================================

" Refer to ':help expand' for details.
" Here '<sfile>' refers to sourced script file name, i.e. '~/.vimrc'.
let user_home=expand("<sfile>:p:h")
let vim_home=join([user_home, ".vim"], "/")
" This variable refers to Vim 8 package manager.
let plugins_home=join([vim_home, "pack", "dist", "start"], "/")

" Homebrew opt directory.
if has("macunix")
    " macOS default paths:
    " - M1/ARM (arm64): /opt/homebrew/opt
    " - Intel x86 (amd64): /usr/local/opt
    " See also:
    " - https://vi.stackexchange.com/questions/2572/
    "     detect-os-in-vimscript/2577#2577
    let arch=substitute(system('uname -m'), '\n', '', '')
    if arch == "x86_64"
        let homebrew_opt_dir="/usr/local/opt"
    elseif arch == "arm64"
        let homebrew_opt_dir="/opt/homebrew/opt"
    endif
elseif has("unix")
    " Linuxbrew installs into 'linuxbrew' user by default.
    " https://docs.brew.sh/Homebrew-on-Linux
    homebrew_opt_dir="/home/linuxbrew/.linuxbrew/opt"
endif



" Plugins {{{1
" ==============================================================================

" Plugins here are managed by vim-plug.
" https://github.com/junegunn/vim-plug

" Useful commands:
" - ':PlugInstall' to install plugins.
" - ':PlugUpdate' to update plugins.

" Specify a directory for plugins.
" - For Neovim, can use 'stdpath("data")' instead of 'vim_home' here.
" - Avoid using standard Vim directory names like 'plugin'.
let vim_plug_home=join([vim_home, "plugged"], "/")
call plug#begin(vim_plug_home)

" Make sure to use single quotes in the 'Plug' calls here.

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
" > Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
" > Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
" > Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
" > Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
" > Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
" > Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
" > Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
" > Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
" > Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
"> Plug '~/my-prototype-plugin'

Plug 'jalvesaq/Nvim-R'

call plug#end()



" Highlighting {{{1
" ==============================================================================

" Enable syntax highlighting.
syntax on

" Note that 'colorscheme' definition (e.g. dracula) can clear all user-defined
" highlight groups. Use ':autocmd ColorScheme' before 'colorscheme' command to
" ensure that the highlight group gets created and is not cleared by future
" 'colorscheme' commands. See ':help :colorscheme' for details.

" Highlight TODO or FIXME comments.
" > highlight Todos cterm=bold ctermbg=red ctermfg=white gui=bold guibg=red \
" >     guifg=white
" > :autocmd ColorScheme * highlight Todos cterm=bold ctermbg=red \
" >     ctermfg=white gui=bold guibg=red guifg=white
" > :match Todos /\(TODO\|FIXME\)/

" See also:
" - https://vim.fandom.com/wiki/Highlight_unwanted_spaces
" - https://github.com/nasamuffin/dotfiles/blob/master/vimrc



" Colors {{{1
" ==============================================================================

" Set Vim-specific sequences for RGB colors.
" This adds nice fallback support for clients and terminal multiplexers that
" don't support true colors yet.
if (has("termguicolors"))
    set termguicolors
    if &term =~# "^screen"
        let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
        let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
    endif
endif

set background=dark

" Dracula {{{2
" ------------------------------------------------------------------------------

" You need a 256-color or truecolor terminal
" and you may want one that supports xterm sequences for :terminal

" Use Dracula theme.
" - https://draculatheme.com/vim/
" - https://draculatheme.com/pro/

" Alternatively, consider using 'filereadable' instead here.
if isdirectory(join([plugins_home, "dracula_pro", "autoload"], "/"))
    " Use Dracula Pro color scheme if symlink exists.
    packadd! dracula_pro
    colorscheme dracula_pro
else
    " Otherwise fall back to standard Dracula theme.
    packadd! dracula-theme
    colorscheme dracula
endif



" Key mappings (bindings) {{{1
" ==============================================================================

let mapleader="a"
let maplocalleader="\\"

" Fix backspace key to work as expected.
" https://unix.stackexchange.com/a/307974
set backspace=indent,eol,start

" Normal mode {{{2
" ------------------------------------------------------------------------------

" Edit my vimrc file.
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" Source my vimrc file.
nnoremap <leader>sv :source $MYVIMRC<cr>

" Add blank line without entering insert mode.
nnoremap <enter> o<esc>
" > nnoremap <s-enter> O<esc>

" Enable code fold toggling with the spacebar.
nnoremap <space> za

" Delete line using leader prefix mapping.
nnoremap <leader>d dd

" Split navigation keys:
"
" - Ctrl+J move to the split below
" - Ctrl+K move to the split above
" - Ctrl+L move to the split to the right
" - Ctrl+H move to the split to the left
"
" In other words, press Ctrl plus the standard VIM movement key to move to a
" specific pane.

nnoremap <c-j> <c-w><c-j>
nnoremap <c-k> <c-w><c-k>
nnoremap <c-l> <c-w><c-l>
nnoremap <c-h> <c-w><c-h>

" Surround current word in single quotes.
nnoremap <leader>' viw<esc>a'<esc>bi'<esc>lel

" Surround current word in double quotes.
nnoremap <leader>" viw<esc>a"<esc>bi"<esc>lel

" Insert mode {{{2
" ------------------------------------------------------------------------------

" Escape from insert mode without stretching to hit Esc key.
inoremap jk <esc>

" Delete line in insert mode using Ctrl+d.
inoremap <c-d> <esc>ddi

" Muscle memory {{{2
" ------------------------------------------------------------------------------

" Enforce muscle memory of HJKL instead of arrow keys.
" It's better practice to escape back to normal mode and navigate there.
" Note that this will break trackpad and can do weird things on macOS.
" > noremap <up> <nop>
" > noremap <down> <nop>
" > noremap <left> <nop>
" > noremap <right> <nop>

" Enforce muscle memory of JK exit instead of Esc.
" > inoremap <esc> <nop>

" Mapping Esc to Caps Lock is a good ergonomic alternative.
" On macOS: System Preferences > Keyboard > Modifier Keys...
" Change Caps Lock Key to Escape.
" Note that Esc will continue to work with this setup.



" Text formatting {{{1
" ==============================================================================

" Always enforce UTF-8.
set encoding=utf-8

" Wrapping and margins {{{2
" ------------------------------------------------------------------------------

" Enable soft wrapping.
" Use nowrap to disable.
set wrap

" Enable hard line wrapping width.
" Can be generally annoying.
" Consider enabling for specific file types instead.
" > set textwidth=80

" Disable automatic line breaks.
" https://stackoverflow.com/questions/2280030
set textwidth=0
set wrapmargin=0

" Set the right margin color column.
" https://stackoverflow.com/questions/2182427
"
" Can define relative to 'textwidth' (hard wrapping) with:
" > set colorcolumn=+1
"
" For 80c width, use 80 + 1.
set colorcolumn=81

" Spaces and tabs {{{2
" ------------------------------------------------------------------------------

" Format using spaces instead of tabs.

" Legacy indent approaches:
" > set autoindent
" > set smartindent

" See also:
" - ':help smartindent'
" - https://stackoverflow.com/questions/234564

" Smart tab mode.
set smarttab

" Expand (detab) tab to spaces.
" This can be annoying when working with TSV files.
set expandtab

" Display tab (\t) visually as 4 spaces.
" Can also set using 'ts' instead of 'tabstop'.
set tabstop=4

" Tab columns will display as 4 spaces.
set softtabstop=4

" When indenting with '>', shift as 4 spaces.
set shiftwidth=4

" Entab files.
" This is often useful for git configuration files.
" https://stackoverflow.com/questions/9104706
" > :set noexpandtab tabstop=4 shiftwidth=4
" > :%retab!

" Detab files.
" https://stackoverflow.com/a/323014/3911732
" > :set expandtab tabstop=4 shiftwidth=4
" > :%retab

" Whitespace {{{2
" ------------------------------------------------------------------------------

" Enable file-type-specific indentation.
" > filetype plugin indent on
if has("autocmd")
    filetype on
    filetype indent on
    filetype plugin on
endif

" Whitespace indicators.
if has("multi_byte")
    set list listchars=tab:»·,trail:·
else
    set list listchars=tab:>-,trail:.
endif



" Navigation {{{1
" ==============================================================================

" Mouse integration {{{2
" ------------------------------------------------------------------------------

" This doesn't work very well inside tmux or when using PuTTY, so disabling.
" Scrolling will continue to work fine inside iTerm2 on macOS.

" Enable mouse integration.
" 'a' means all here.
" > set mouse=a

" Disable mouse integration.
set mouse=

" Window management {{{2
" ------------------------------------------------------------------------------

set splitbelow
set splitright

" Interface elements {{{2
" ------------------------------------------------------------------------------

" Highlight current line.
set cursorline

" Show command in bottom bar.
set showcmd

" Always show status line.
" Disable with '=0'.
set laststatus=2

" Always show ruler at bottom.
set ruler

" Command mode menus.
set wildmenu
set wildmode=list:longest,full

" Line numbers {{{2
" ------------------------------------------------------------------------------

" Enable line numbers.
set number

" Disable line numbers.
" Using this currently because it's easier to paste on Windows with tmux.
" > set nonumber

" Search (matching) {{{2
" ------------------------------------------------------------------------------

set hlsearch
set ignorecase
set incsearch
set showmatch
set smartcase

" Use regular expression matching by default.
" https://github.com/nasamuffin/dotfiles/blob/master/vimrc
" > :nnoremap / /\v
" > :cnoremap %s/ %s/\v
" > :cnoremap s/ s/\v
" > :xnoremap '<,'>s/ '<,'>s/\v
" > :xnoremap / /\v
" > :xnoremap s/ s/\v

" Mouse integration {{{2
" ------------------------------------------------------------------------------

" Enable mouse integration.
" 'a' means all here.
" This doesn't work very well inside PuTTY and/or tmux.
if has("macunix") && empty($TMUX)
    set mouse=a
else
    set mouse=
endif

" Folding {{{2
" ------------------------------------------------------------------------------

" foldmethod alternatives: indent, syntax
set foldmethod=marker

" Disable collapsed folds by default.
" Restore folds with 'zc'.
" https://stackoverflow.com/questions/8316139
" Restore folds with 'zc'.
set foldlevelstart=99
set nofoldenable



" File management {{{1
" ==============================================================================

" Disable creation of 'foo~' files.
" These are annoying and create file system cruft.
set nobackup

" Disable the swap file, if desired.
" This also creates FS cruft but is useful for recovery.
" > set noswapfile



" vim-galore tips {{{1
" ==============================================================================

" Some fantastic usability vips from the 'vim-galore' guide.
" Refer to https://github.com/mhinz/vim-galore for details.

" Disable audible and visual bells {{{2
" ------------------------------------------------------------------------------

" This is often annoying when scrolling inside a document using mouse or
" trackpad input instead of the keyboard.

set noerrorbells
set novisualbell
set t_vb=

" Don't lose selection when shifting sidewards {{{2
" ------------------------------------------------------------------------------

" If you select one or more lines, you can use `<` and `>` for shifting them
" sidewards. Unfortunately you immediately lose the selection afterwards.
"
" You can use `gv` to reselect the last selection (see `:h gv`), thus you can
" work around it like this:

xnoremap <  <gv
xnoremap >  >gv

" Now you can use `>>>>>` on your visual selection without any problems.
"
" NOTE: The same can be achieved using `.`, which repeats the last change.

" Quickly move current line {{{2
" ------------------------------------------------------------------------------

" These mappings also take a count, so 2]e moves the current line 2 lines below.

nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

" Quickly add empty lines {{{2
" ------------------------------------------------------------------------------

" Now 5[<space> inserts 5 blank lines above the current line.

nnoremap [<space>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<space>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" Saner behavior of n and N {{{2
" ------------------------------------------------------------------------------

" The direction of n and N depends on whether / or ? was used for searching
" forward or backward respectively. This is pretty confusing to me.
"
" If you want n to always search forward and N backward, use this:

nnoremap <expr> n  'Nn'[v:searchforward]
xnoremap <expr> n  'Nn'[v:searchforward]
onoremap <expr> n  'Nn'[v:searchforward]

nnoremap <expr> N  'nN'[v:searchforward]
xnoremap <expr> N  'nN'[v:searchforward]
onoremap <expr> N  'nN'[v:searchforward]

" Smarter cursorline {{{2
" ------------------------------------------------------------------------------

" I love the cursorline, but I only want to use it in the current window and not
" when being in insert mode:

autocmd InsertLeave,WinEnter * set cursorline
autocmd InsertEnter,WinLeave * set nocursorline

" Change cursor style dependent on mode {{{2
" ------------------------------------------------------------------------------

" I like to use a block cursor in normal mode, i-beam cursor in insert mode, and
" underline cursor in replace mode.

if has("macunix")
    if empty($TMUX)
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
        let &t_SR = "\<Esc>]50;CursorShape=2\x7"
    else
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
        let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\"
    endif
endif

" This simply tells Vim to print a certain sequence of characters (escape
" sequence) when entering/leaving insert mode. The underlying terminal, or
" programs like tmux that sit between Vim and the terminal, will process and
" evaluate it.
"
" There's one drawback though: there are many terminal emulator
" implementations and not all use the same sequences for doing the same things.
" The sequences used above might not work with your implementation. Your
" implementation might not even support different cursor styles.
"
" The example above works with iTerm2.



" Languages {{{1
" ==============================================================================

" Python {{{2
" ------------------------------------------------------------------------------

" See also:
" - https://realpython.com/vim-and-python-a-match-made-in-heaven/
" - syntastic (see below)
"   https://github.com/vim-syntastic/syntastici
" - pylint
"   https://www.pylint.org/
" - SimpylFold
"   https://github.com/tmhedberg/SimpylFold
" - YouCompleteMe
"   https://github.com/ycm-core/YouCompleteMe
" - jedi
"   https://github.com/davidhalter/jedi

let python_highlight_all=1



" Plugins {{{1
" ==============================================================================

" NERDTree {{{2
" ------------------------------------------------------------------------------

" Consider using nerdtree-git-plugin.
" https://github.com/Xuyuanp/nerdtree-git-plugin

" Map a specific key or shortcut to open NERDTree.
map <C-n> :NERDTreeToggle<CR>

" Always open a NERDTree automatically at startup.
" > autocmd vimenter * NERDTree

" Open a NERDTree automatically when vim starts up if no files were specified.
" > autocmd StdinReadPre * let s:std_in=1
" > autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Open NERDTree automatically when vim starts up on opening a directory.
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter *
    \ if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in")
    \ | exe 'NERDTree' argv()[0]
    \ | wincmd p
    \ | ene |
    \ exe 'cd '.argv()[0]
    \ | endif

" Close vim if the only window left open is a NERDTree.
autocmd bufenter *
    \ if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree())
    \ | q | endif

" Set default arrows.
let g:NERDTreeDirArrowExpandable="▸"
let g:NERDTreeDirArrowCollapsible="▾"

" Nvim-R {{{2
" ------------------------------------------------------------------------------

" Documentation details:
" https://raw.githubusercontent.com/jalvesaq/Nvim-R/master/doc/Nvim-R.txt

let R_assign=0
let R_indent_commented=0
let R_indent_ess_comments=1
let R_min_editor_width=80
let R_notmuxconf=1
let R_rcomment_string="## "
let R_rconsole_height=20
let R_rconsole_width=80
let R_syntax_folding=1

" SimpylFold {{{2
" ------------------------------------------------------------------------------

" Useful for Python IDE.
" https://github.com/tmhedberg/SimpylFold
" > set foldmethod=indent
" > let g:SimpylFold_docstring_preview=1

" airline {{{2
" ------------------------------------------------------------------------------

" Consider adding tmuxline integration.
" https://github.com/edkolev/tmuxline.vim

" Tab line.
" > let g:airline#extensions#tabline#enabled=1
" > let g:airline#extensions#tabline#formatter="default"
" > let g:airline#extensions#tabline#left_alt_sep="|"
" > let g:airline#extensions#tabline#left_sep=" "

" jedi-vim {{{2
" ------------------------------------------------------------------------------

" This plugin freaks out in an active conda environment.

" > let g:jedi#auto_initialization=0
" > let g:jedi#auto_vim_configuration=1

" > let g:jedi#completions_enabled=0
" > let g:jedi#popup_on_dot=0
" > let g:jedi#popup_select_first=1
" > let g:jedi#show_call_signatures=1
" > let g:jedi#use_splits_not_buffers="left"
" > let g:jedi#use_tabs_not_buffers=1

" fzf {{{2
" ------------------------------------------------------------------------------

" This configuration is intended for Homebrew install, and works with the
" Vim 8 package manager.
"
" How to update rtp with variable in path:
" - https://vi.stackexchange.com/questions/11601/
" - https://superuser.com/questions/806595/
"
" Check that configuration is enabled with ':Files' command.
"
" See also:
" - https://github.com/junegunn/fzf/blob/master/README-VIM.md
" - https://github.com/junegunn/fzf.vim#commands
" - https://github.com/junegunn/fzf.vim/issues/1102
" - https://www.reddit.com/r/vim/comments/ifegzw/
"     how_do_i_add_fzf_using_vim_8_packages/

let fzf_dir=join([homebrew_opt_dir, "fzf"], "/")
if isdirectory(fzf_dir)
    " The 'set rtp+=' approach only works for a hard-coded path, and does not
    " support variables, unfortunately.
    " > set rtp+=/usr/local/opt/fzf
    " For variables, we have to use 'let &rtp' instead. The comma is necessary
    " here to deliniate the directory in the path string.
    let &rtp.=','.fzf_dir
    " Ensure we can use ':fzf' and ':Fzf' aliases in addition to ':FZF'.
    cnoreabbrev fzf FZF
    command Fzf FZF
endif

" python-mode {{{2
" ------------------------------------------------------------------------------

let g:pymode_python="python3"

" startify {{{2
" ------------------------------------------------------------------------------

" Disable the plugin, if necessary.
" > let g:startify_disable_at_vimenter=1

let g:startify_custom_header=""

" syntastic {{{2
" ------------------------------------------------------------------------------

" Check which linters are enabled with ':SyntasticInfo'.
" Check PATH with ':echo syntastic#util#system('echo "$PATH"')'.
" Refer to ':help syntastic-checkers' for more details.

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" > let g:syntastic_aggregate_errors=1
let g:syntastic_always_populate_loc_list=1
let g:syntastic_auto_loc_list=1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0

" Dockerfile
let g:syntastic_dockerfile_checkers=["hadolint"]

" Python
let g:syntastic_python_checkers=["flake8", "pyflakes", "pylint"]
let g:syntastic_python_flake8_args="--ignore=E402,W503"
" Enable use of custom '.pylintrc' file.
" https://groups.google.com/forum/#!topic/vim_use/Gd6lO3ETnl0
let g:syntastic_python_pylint_args="--rcfile=~/.pylintrc"

" R
" https://github.com/jimhester/lintr
" This can be slow to load, so disable by default.
" > let g:syntastic_enable_r_lintr_checker=1
" > let g:syntastic_r_checkers=["lintr"]
" > let g:syntastic_r_lintr_linters='with_defaults(object_name_linter("camelCase"))'

" vim-markdown {{{2
" ------------------------------------------------------------------------------

au BufNewFile,BufFilePre,BufRead *.ronn set filetype=markdown

" Completely disable Markdown-specific code folding.
" > let g:vim_markdown_folding_disabled=1

" Potentially useful:
" > let g:vim_markdown_folding_style_pythonic=1
" > let g:vim_markdown_override_foldtext=0

let g:vim_markdown_folding_level=2



" Clipboard / pasteboard {{{1
" ==============================================================================

" Enable copy to clipboard (for macOS).
" Now 'Vy' will work.
"
" > :w !pbcopy
" https://stackoverflow.com/questions/677986
"
" Note that this won't work for PuTTY on Windows. Instead, hold down SHIFT
" and then you can highlight with the mouse. Yank doesn't integrate well
" with the Windows clipboard unless you use X11 forwarding.
" https://stackoverflow.com/a/4313348
if has("macunix")
    set clipboard=unnamed
endif



" Security {{{1
" ==============================================================================

" Disable modeline.
" https://github.com/numirias/security/blob/master/doc/
"     2019-06-04_ace-vim-neovim.md
set nomodeline
