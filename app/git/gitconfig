# """
# Global git configuration.
# Updated 2021-05-07.
#
# Retab spaces in vim:
# https://stackoverflow.com/questions/9104706
# > :set tabstop=4
# > :set noexpandtab
# > :%retab!
#
# Do not store sensitive information such as the Git user credentials
# (`name` / `email`), or things such as the `signingkey` in this file.
# Add them in `~/.gitconfig.local` instead.
#
# Here's how to make Git more relaxed about corrupt repos:
# https://stackoverflow.com/questions/56507791/
#
# oh-my-zsh repo can fail to clone unless these are set.
# > git config --global fetch.fsck.zeroPaddedFilemode warn
# > git config --global receive.fsck.zeroPaddedFilemode warn
# > git config --global transfer.fsck.zeroPaddedFilemode warn
# > git config --global fsck.zeroPaddedFilemode warn
#
# See also:
# - https://github.com/alrra/dotfiles/blob/main/src/git/gitconfig
# - https://github.com/roryk/dotfiles/blob/master/gitconfig
# - https://github.com/vsbuffalo/dotfiles/blob/master/.gitconfig
# """

[advice]
    detachedHead = false

[alias]  # {{{1
    a = add

    # Add all unstaged changes.
    aa = add --all

    br = branch -vv

    # Assume we want an interactive commit by default.
    c = commit

    # Commit all unstaged changes, interactively.
    ca = !git add --all && git commit

    # Using 'i' for interactive here.
    ci = commit

    # Clean up the repo. Don't mask `clean` with an alias!
    cleanup = !git remote prune origin \
        && git gc \
        && git clean -dfx \
        && git stash clear

    # Commit with a message, non-interactively.
    cm = commit -m

    # List contributors, ordered by the number of commits.
    contrib = shortlog --email --numbered --summary

    co = checkout

    d = diff -- . \
        ':!*package-lock.json' \
        ':!*yarn.lock'

    dc = diff --cached -- . \
        ':!*package-lock.json' \
        ':!*yarn.lock'

    f = fetch

    # Find commits by source code.
    find = "!f() { \
        git log --date=short --decorate --pretty=custom -S\"$1\"; \
    }; f"

    # Find commits by commit message.
    find-msg = "!f() { \
        git log --date=short --decorate --pretty=custom --grep=\"$1\"; \
    }; f"

    # EXPERIMENTAL. Credit an author on the latest commit.
    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" --no-edit --reuse-message=HEAD; \
        fi \
    }; f"

    # EXPERIMENTAL. Credit a co-author on the latest commit.
    # See also:
    # - https://help.github.com/en/articles/
    #     creating-a-commit-with-multiple-authors
    # - https://help.github.com/en/articles/
    #     creating-a-commit-on-behalf-of-an-organization
    credit-co-author = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            GIT_EDITOR=\"git interpret-trailers --in-place --trailer='Co-authored-by: $1 <$2>'\" git commit --amend; \
        fi \
    }; f"

    cp = cherry-pick

    # Show custom text-based graphical log of the commit history.
    # Currently there's not an easy way to reverse graph mode natively.
    # https://zwischenzugs.com/2016/06/04/power-git-log-graphing/
    glog = log \
        --abbrev-commit \
        --all \
        --decorate \
        --graph \
        --oneline \
        --simplify-by-decoration
    # > glog2 = log \
    # >     --abbrev-commit \
    # >     --all \
    # >     --graph \
    # >     --pretty=custom

    # Show custom log of the commit history.
    l = log --pretty=custom

    # Show the last commit.
    last = log -1 HEAD

    # List remote branches. Defaults to "origin".
    lrb = "!f() { \
        remote=\"${1:-origin}\"; \
        git ls-remote --heads \"$remote\"; \
    }; f"

    # EXPERIMENTAL. Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch.
    mpr = "!f() { \
        current_branch=\"$(git symbolic-ref --short HEAD)\"; \
        branch=\"${2:-$current_branch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B \"$branch\" && \
            git rebase \"$branch\" pr/$1 && \
            git checkout -B \"$branch\" && \
            git merge pr/$1 && \
            git branch --delete --force pr/$1 && \
            git commit --amend --message=\"$(git log -1 --pretty=%B)\n\nClose: #$1\"; \
        fi \
    }; f"

    p = push

    pr = !sh -c 'git fetch origin pull/$1/head:pr$1' -

    r = rebase

    # Remove the tag with the specified tag name if exists and tag the latest
    # commit with that name.
    retag = "!f() { \
        git tag --delete \"$1\" &> /dev/null; \
        git tag \"$1\"; \
    }; f"

    s = status

    shorty = status --short --branch

    st = status -sb

    trash = checkout --

    # Update the content of the last commit by including all staged changes.
    # Note that the term "update" is used here loosely. Git doesn't actually
    # update the last commit, but instead, creates a new commit based on the
    # last commit and replaces it.
    u = commit --amend --no-edit

    # Update the content of the last commit by including all local changes.
    ua = !git add --all && git commit --amend --no-edit

    # Update the content of the last commit, including all staged changes, and
    # allow the user to change the commit message.
    um = commit --amend

    # Undo commits. By default, only reverts the last commit.
    undo = "!f() { \
        num=\"${1:-1}\"; \
        git reset --soft \"HEAD~$num\"; \
    }; f"

    unstage = reset HEAD --

    up = !sh -c 'git pull --rebase --prune && git log --pretty HEAD@{1}..'

    # Start web-based visualizer. This is super cool, give it a try.
    # If you hit a Ruby error, run `gem install webrick` to resolve.
    w = instaweb --httpd=webrick

    who = shortlog -n -s --no-merges

[color]  # {{{1
    ui = true
[color "branch"]
    current = green bold
    local = green
    remote = yellow
[color "diff"]
    frag = magenta
    meta = yellow
    new = green
    newMoved = cyan
    old = red
    oldMoved = blue
[color "status"]
    added = green reverse
    changed = yellow reverse
    untracked = red reverse

[core]  # {{{1
    abbrev = 12
    attributesFile = ~/.gitattributes
    autocrlf = input
    editor = vim
    excludesfile = ~/.gitignore

[credential]  # {{{1
    # Enable credential caching.
    #
    # Particularly useful for commits over HTTPS, on machines where we don't
    # have SSH keys configured for GitHub.
    # 
    # > git config --global credential.helper "cache --timeout=10000000"
    #
    # See also:
    # - https://git-scm.com/docs/git-credential-store
    # - https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage
    # - https://happygitwithr.com/credential-caching.html
    # - https://stackoverflow.com/a/5343146/3911732
    helper = cache --timeout=10000000

[diff]  # {{{1
    # Show blocks of moved text of at least 20 alphanumeric characters
    # differently than adds/deletes.
    # https://git-scm.com/docs/git-diff#git-diff-zebra
    colorMoved = zebra
[diff "bin"]
    # Use `hexdump` to diff binary files.
    textconv = hexdump --canonical --no-squeezing
[diff "nb2md"]
    # Diff Jupyter Notebooks as Markdown.
    textconv = nb2md

[fetch]  # {{{1
    fsckobjects = false
    zeroPaddedFilemode = ignore
[fetch "fsck"]
    zeroPaddedFilemode = warn

[filter "lfs"]  # {{{1
    # Large file storage (LFS).
    clean = git-lfs clean -- %f
    process = git-lfs filter-process
    required = true
    smudge = git-lfs smudge -- %f

[fsck]  # {{{1
    zeroPaddedFilemode = warn

[help]  # {{{1
    # If a command is mistyped, make Git automatically run the command it thinks
    # the user wanted to type while also giving the user some time to prevent it
    # from doing so.
    #
    # https://git-scm.com/book/en/v2/
    #     Customizing-Git-Git-Configuration#_help_autocorrect
    #
    # This can be a bit dangerous, so disabled for now.
    # > autocorrect = 20

[init]  # {{{1
    # GitHub recommending 'main' instead of 'master' as of 2020.
    defaultBranch = main

[pull]  # {{{1
    # Changed in git 2.27.0:
    #
    # warning: Pulling without specifying how to reconcile divergent branches is
    # discouraged. You can squelch this message by running one of the following
    # commands sometime before your next pull:
    #
    #   git config pull.rebase false  # merge (the default strategy)
    #   git config pull.rebase true   # rebase
    #   git config pull.ff only       # fast-forward only
    #
    # You can replace "git config" with "git config --global" to set a default
    # preference for all repositories. You can also pass --rebase, --no-rebase,
    # or --ff-only on the command line to override the configured default per
    # invocation.
    rebase = false

[pretty]  # {{{1
    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

[push]  # {{{1
    default = simple
    # Make `git push` automatically push relevant annotated tags when pushing
    # branches out.
    followTags = true

[receive]  # {{{1
    fsckobjects = false
[receive "fsck"]
    zeroPaddedFilemode = warn

[status]  # {{{1
    # Show summary for all git submodules, which can be slow.
    # > submoduleSummary = true

[transfer]  # {{{1
    fsckobjects = false
[transfer "fsck"]
    zeroPaddedFilemode = warn

[user]  # {{{1
    # Do not guess the user's identity.
    useConfigOnly = true

# The following needs to remain at the end of this file in order to allow
# any of the above configs to be overwritten by the local ones.

[include]  # {{{1
    # Load local configs.
    # https://git-scm.com/docs/git-config#_includes
    path = ~/.gitconfig.local
